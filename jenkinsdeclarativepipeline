pipeline{
    
  agent any
/*  
   agent{
   label 'amazon'
}
*/
tools {
  maven 'maven3.8.6'
}
options {
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
  timestamps()
}
triggers {
  pollSCM '* * * * *'
}
stages{
  stage('Print Details')
  {
      steps{
          echo "Build Number is: ${BUILD_NUMBER}"
          echo "Job Name is: ${JOB_NAME}"
          echo "Node Name is: ${NODE_NAME}"
      }
  }
  stage('Code Checkout')
  {
  steps
    {
      notifyBuild("STARTED")
      git branch: 'development', credentialsId: '2a35ffb8-2438-4d76-94d5-d23e44167254', url: 'https://github.com/puneeth-devops/maven-web-application.git'
    }
  }
  stage('Build Applctn Package')
  {
    steps{
      sh "mvn clean package"          
    }
  }
  stage('Create SonaQube Report')
  {
    steps{
    sh "mvn sonar:sonar"    
    }  
  }
  stage('Upload Artifacts into Nexus')
  {
    steps{
     sh "mvn deploy"    
    }  
  }
  stage('Deploy into Tomcat')
  {
    steps{
     sshagent(['tomcatsshID']) {
     sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.3.186:/opt/apache-tomcat-9.0.69/webapps/maven-web-application.war"
       }
    }  
  }
 }
 post {
  success {
      notifyBuild("SUCCESSFUL")
    // One or more steps need to be included within each condition's block.
  }
  failure {
    // One or more steps need to be included within each condition's block.
      notifyBuild("FAILURE")
  }
}
}

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "channel2")
}
